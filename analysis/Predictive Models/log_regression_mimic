
#Import Libraries after installed
library(lattice)
library(ggplot2)
library(caret)
dataset = read.csv("mimic_cardiogenic_shock.csv")

#Partition data into training and validation cohorts, with proportion p of data used for training cohort
set.seed(500)
data_preprocessed = createDataPartition(dataset$hospital_mortality, p = 0.70, list = FALSE)
data_trn = dataset[data_preprocessed, ]
data_tst = dataset[-data_preprocessed, ]

#Remove columns from trained dataset which have too many missing values, then remove data which is not a numeric or integer type
data_trn_clean = data_trn[, colMeans(is.na(data_trn)) < 0.20]
data_trn_clean = data_trn_clean[,lapply(data_trn_clean, class) %in% c("integer", "numeric")]

## Create a formula for a model with a large number of variables:
# This uses columns 3 through 105 as possible predictive variables, though we should narrow this down
xnames <- paste(names(data_trn_clean[3:105]), sep="")
fmla <- as.formula(paste("factor(hospital_mortality) ~ ", paste(xnames, collapse= "+")))

#Train a logistic regression model
glm_model = train(
  form = fmla,
  data = data_trn_clean,
  trControl = trainControl(method = "cv", number = 5),
  method = "glm",
  na.action = na.omit,
  family = "binomial") # Setting family to binomial ensures this is a logistic regression model

# Determine coefficients for variables in model and order from highest to lowest
# List first 10 coefficients, theoretically the ten highest predictors of death
model_coef = coef(glm_model$finalModel)
model_coef = model_coef[order(-model_coef)]
model_coef[1:10]
glm_model$finalModel

# Create a function to calculate error between actual data and prediction based on above model
calc_class_err = function(data, model, predicted) {
  glm_model_pred = ifelse(predict(model, new_data = data, type = "prob")[,2] > 0.5, 1, 0)
  mean(data$hospital_mortality != glm_model_pred, na.rm=TRUE)
}

## First will predict this for the trained dataset, then for the cohort reserved for testing
err_trn = calc_class_err(data = data_trn_clean, model = glm_model, predicted = glm_model_pred)
err_tst = calc_class_err(data = data_tst, model = glm_model, predicted = glm_model_pred)

# ROC curve - still haven't gotten this to work yet

library(pROC)
test_prob = predict(glm_model, newdata = data_trn_clean, type = "prob")
test_roc = roc(data_trn_clean$hospital_mortality ~ test_prob[,2], plot = TRUE, print.auc = TRUE)
data
